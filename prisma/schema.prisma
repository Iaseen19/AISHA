// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  THERAPIST
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  VIDEO
  CHAT
  VOICE
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String
  password          String
  role              UserRole          @default(PATIENT)
  subscriptionTier  String?
  language          String?           @default("en")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  patientAppointments Appointment[]   @relation("PatientAppointments")
  therapistInfo     Therapist?
  emergencyContacts EmergencyContact[]
  analytics         AnalyticsData[]
  hostedEvents      CommunityEvent[]  @relation("EventHost")
  participatedEvents CommunityEvent[] @relation("EventParticipants")
}

model Therapist {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique
  specializations String[]
  rating          Float?
  availability    Availability[]
  appointments    Appointment[] @relation("TherapistAppointments")
}

model EmergencyContact {
  id           String   @id @default(cuid())
  name         String
  relationship String
  phone        String
  email        String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model Appointment {
  id          String           @id @default(cuid())
  therapist   Therapist        @relation("TherapistAppointments", fields: [therapistId], references: [id])
  therapistId String
  patient     User             @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId   String
  datetime    DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  type        AppointmentType
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model AnalyticsData {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  sessionDuration Int
  moodScores     Int[]
  interactionCount Int
  progressMetrics Json[]
  createdAt       DateTime @default(now())
}

model CommunityEvent {
  id              String   @id @default(cuid())
  title           String
  description     String
  datetime        DateTime
  type            String
  host            User     @relation("EventHost", fields: [hostId], references: [id])
  hostId          String
  participants    User[]   @relation("EventParticipants")
  maxParticipants Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  content     String   @db.Text
  tags        String[]
  language    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Availability {
  id          String    @id @default(cuid())
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  therapistId String
  dayOfWeek   Int
  startTime   String
  endTime     String
  timezone    String
}

model SubscriptionPlan {
  id                 String   @id @default(cuid())
  name               String
  price             Float
  features          String[]
  maxSessions       Int?
  maxResources      Int?
  includesCommunity Boolean
  includesAnalytics Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
